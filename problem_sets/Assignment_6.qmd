---
title: "Assignment_6"
format: gfm
editor: visual
engine: knitr 
---

## **Exercise 1. Tibble and Data Import**

Import the data frames listed below into R and [parse](https://r4ds.had.co.nz/data-import.html#parsing-a-vector) the columns appropriately when needed. Watch out for the formatting oddities of each dataset. Print the results directly, **without** using `kable()`.

**You only need to finish any three out of the five questions in this exercise in order to get credit.**

#### **1.1 Create the following tibble manually, first using `tribble()` and then using `tibble()`. Print both results. \[We didn’t have time to cover this in class, but look up how these functions work [here](https://r4ds.had.co.nz/tibbles.html#creating-tibbles)\]**

```{r}
library(tidyverse)
library(knitr)
library(janitor)


tribble(
  ~a, ~b, ~c,
  #--#--#---
  1, 2.1, "apple",
  2, 3.2, "orange"
) |> 
  print()

## # A tibble: 2 × 3
##       a     b c     
##   <dbl> <dbl> <chr> 
## 1     1   2.1 apple 
## 2     2   3.2 orange


tibble(
  a = 1, 2,
  b = 2.1, 3.2,
  c = "apple", "orange"
) |> 
  print()
## # A tibble: 2 × 3
##       a     b c     
##   <int> <dbl> <chr> 
## 1     1   2.1 apple 
## 2     2   3.2 orange

```

#### **1.2 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt` into R. Change the column names into “Name”, “Weight”, “Price”.**

```{r}

dataset2 <- read_csv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt", col_names = FALSE)

dataset2 |> 
  rename(
    Name = X1,
    Weight = X2,
    Price = X3
  ) |> 
  print()

```

#### **1.3 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt` into R. Watch out for the first few lines, missing values, separators, quotation marks, and deliminaters.**

```{r}
read_delim(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt",
  skip = 2, 
  col_names = TRUE,
  na = c("?", "Not Available"),
  ) |> 
  clean_names() |> 
  mutate(name = str_replace_all(name, "/", "")) |> 
  print()
```

#### **1.4 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset4.txt` into R. Watch out for comments, units, and decimal marks (which are `,` in this case).**

```{r}
clean_data <- read_delim(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset4.txt",
  locale = locale(decimal_mark = ","),
  comment = "/"
  ) 

cleaner_data <- clean_data |> 
  mutate(
    Weight = str_remove_all(Weight, "kg"),
    Price = str_remove_all(Price, "€")
  ) 

cleaner_data



```

## **Exercise 2. Weather station**

This dataset contains the weather and air quality data collected by a weather station in Taiwan. It was obtained from the Environmental Protection Administration, Executive Yuan, R.O.C. (Taiwan).

#### **2.1 Variable descriptions**

-   The text file `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt` contains descriptions of different variables collected by the station.

-   Import it into R and print it in a table as shown below with `kable()`.

```{r}
read_delim(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt",
  delim = "-") |> 
  kable()


```

#### **2.2 Data tidying**

-   Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv` into R. As you can see, this dataset is a classic example of untidy data: values of a variable (i.e. hour of the day) are stored as column names; variable names are stored in the `item` column.

-   Clean this dataset up and restructure it into a tidy format.

-   Parse the `date` variable into date format and parse `hour` into time.

-   Turn all invalid values into `NA` and turn `NR` in rainfall into `0`.

-   Parse all values into numbers.

-   Show the first 6 rows and 10 columns of this cleaned dataset, as shown below, *without* using `kable()`.

*Hints: you don’t have to perform these tasks in the given order; also, warning messages are not necessarily signs of trouble.*

```{r}
weather_raw <- read_delim(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv", na = c("","NA"), col_types = cols(.default = "c")
  ) 

weather_longer <- weather_raw |> 
  pivot_longer(
    cols = matches("^\\d{2}$"), 
    names_to = "hour", 
    values_to = "value"
    ) |> 
  pivot_wider(values_from = value, names_from = item)

weather_clean <- weather_longer |> 
  mutate(
    date = parse_date(date, format = "%Y/%m/%d"),
    hour = parse_time(hour, format = "%H")
  ) |> 
  # Turn all invalid values into NA and turn NR in rainfall into 0
  mutate(
    RAINFALL = ifelse(RAINFALL == "NR", "0", RAINFALL)
  ) |> 
  # Parse all values into numbers
  mutate(across(
    .cols = c(AMB_TEMP:WS_HR),
    .fns = ~as.numeric(.)
    )) 


# Show the first 6 rows and 10 columns of this weather_clean without using `kable()`
weather_clean |> 
  select(1:10) |> 
  print(n = 6)

```

#### **2.3 Using this cleaned dataset, plot the daily variation in ambient temperature on September 25, 2015, as shown below.**

```{r}
weather_clean |> 
  filter(date == "2015/09/25") |> 
  ggplot(aes(x = hour, y = AMB_TEMP)) +
           geom_path()
```

#### **2.4 Plot the daily average ambient temperature throughout the year with a continuous line, as shown below.**

```{r}
weather_clean |> 
  group_by(date) |> 
  summarise(daily_average_ambient_temp = mean(AMB_TEMP, na.rm = TRUE)) |> 
  ggplot(aes(x = date, y = daily_average_ambient_temp)) +
           geom_path()
```

#### **2.5 Plot the total rainfall per month in a bar chart, as shown below.**

*Hint: separating date into three columns might be helpful.*

```{r}
weather_clean |> 
  replace_na(list(RAINFALL = 0)) |> 
  separate(date, into = c("Year", "Month", "Day"), sep = "-") |> 
  group_by(Month) |> 
  summarize(monthly_rainfall = sum(RAINFALL)) |> 
  ggplot(aes(x = Month, y = monthly_rainfall)) + 
  geom_col()
```

#### **2.6 Plot the daily average ambient temperature throughout the year with a continuous line, as shown below.**

```{r}
unite(weather_clean, time, date, hour, sep=" ") |> 
  mutate(time = parse_datetime(time)) |> 
  filter(time<=parse_datetime("2015-09-08"), time>=parse_datetime("2015-09-01"), !is.na(PM2.5))  |> 
  ggplot(aes(x=time, y=PM2.5))+
  geom_line()
  
  
```

#### 
